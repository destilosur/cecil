{"id":"World/components/cube.js","dependencies":[{"name":"D:\\programacion\\Cursos\\Three-DiscoverThree\\plantillaParcel\\package.json","includedInParent":true,"mtime":1676482843046},{"name":"three","loc":{"line":13,"column":7,"index":199},"parent":"D:\\programacion\\Cursos\\Three-DiscoverThree\\plantillaParcel\\src\\World\\components\\cube.js","resolved":"D:\\programacion\\Cursos\\Three-DiscoverThree\\plantillaParcel\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCube = createCube;\nvar _three = require(\"three\");\nfunction createMaterial() {\n  // create a texture loader.\n  var textureLoader = new _three.TextureLoader();\n\n  // const baseColorT = textureLoader.load('./assets/textures/AcousticFoam_512_albedo.png');\n  var metalicT = textureLoader.load('./assets/textures/AcousticFoam_512_metallic.png');\n  var normalT = textureLoader.load('./assets/textures/AcousticFoam_512_normal.png');\n  // // const alphaT = textureLoader.load('./assets/textures/water_1_M_Normal.jpg');\n  var heightT = textureLoader.load('./assets/textures/AcousticFoam_512_height.png');\n  var aoT = textureLoader.load('./assets/textures/AcousticFoam_512_ao.png');\n  var roughnessT = textureLoader.load('./assets/textures/AcousticFoam_512_roughness.png');\n\n  // const baseColorT = textureLoader.load('./assets/textures/bamboo-wood-semigloss-albedo.png');\n  // const normalT = textureLoader.load('./assets/textures/bamboo-wood-semigloss-normal.png');\n  // const roughnessT = textureLoader.load('./assets/textures/bamboo-wood-semigloss-roughness.png');\n  // const metalicT = textureLoader.load('./assets/textures/bamboo-wood-semigloss-metal.png');\n  // const aoT = textureLoader.load('./assets/textures/bamboo-wood-semigloss-ao.png');\t// \n  // const heightT = textureLoader.load('./assets/textures/AcousticFoam_512_height.png');\n\n  var baseColorT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_basecolor.jpg');\n  // const normalT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_normal.jpg');\n  // const roughnessT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_roughness.jpg');\n  // const metalicT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_metallic.jpg');\n  // const aoT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_ambientOcclusion.jpg');\t// \n  // const heightT = textureLoader.load('./assets/textures/Metal_ArtDeco_Tiles_001_height.png');\n\n  // baseColorT.wrapS = RepeatWrapping;\n  // baseColorT.wrapT = RepeatWrapping;\n  // baseColorT.repeat.set(2, 2);\n  // metalicT.wrapS = RepeatWrapping;\n  // metalicT.wrapT = RepeatWrapping;\n  // metalicT.repeat.set(2, 2);\n  // aoT.wrapS = RepeatWrapping;\n  // aoT.wrapT = RepeatWrapping;\n  // aoT.repeat.set(2, 2);\n  // baseColorT.offset.set(0.0, 0.4);\n  // baseColorT.rotation = (0,0,0.2);\n\n  // create a \"standard\" material using\n  // the texture we just loaded as a color map\n  baseColorT.encoding = _three.sRGBEncoding;\n  var material = new _three.MeshStandardMaterial({\n    color: '#F2055C',\n    map: baseColorT,\n    normalMap: normalT,\n    normalScale: new _three.Vector2(1, 1),\n    roughnessMap: roughnessT,\n    roughness: 0.9,\n    metalnessMap: metalicT,\n    metalness: 0.1,\n    aoMap: aoT,\n    displacementMap: heightT,\n    displacementScale: 0.9,\n    // bumpMap: heightT,\n    // bumpScale: 1.0,\n\n    // alphaMap: alphaTexture,\n    transparent: true,\n    side: _three.DoubleSide\n  });\n  return material;\n}\nfunction createCube() {\n  var geometry = new _three.SphereGeometry(1, 64, 64);\n  // const geometry = new PlaneBufferGeometry(4, 4);\n  // const geometry = new BoxBufferGeometry(1, 1, 1,64, 64, 64);\n\n  var material = createMaterial();\n  var cube = new _three.Mesh(geometry, material);\n  cube.geometry.attributes.uv2 = cube.geometry.attributes.uv;\n  cube.rotation.set(-0.5, -0.1, 0.8);\n\n  //para que gire 30¤ por segundo en cualquier dispositivo\n  var seg = 1;\n  var radiansPerSecond = _three.MathUtils.degToRad(30 / seg);\n\n  // this method will be called once per frame\n  cube.tick = function (delta) {\n    // increase the cube's rotation each frame\n    // si tarda mucho delta rota mas si tarda menos rota menos\n    // si renderiza en un seg (1 * 30¤ = 30¤) en (½ seg por 30¤ = 15¤) asi se iguala la velocidad de rotacion\n    cube.rotation.z += radiansPerSecond * delta;\n    cube.rotation.x += radiansPerSecond * delta;\n    cube.rotation.y += radiansPerSecond * delta;\n    // console.log(delta);\n  };\n\n  return cube;\n}"},"sourceMaps":null,"error":null,"hash":"ea76225d2b2eac08b398537c0720a5ea","cacheData":{"env":{}}}